import os
from dotenv import load_dotenv 
import discord
from discord.ext import commands
from keep_alive import keep_alive
import random
import json

load_dotenv()
token = os.getenv('DISCORD_BOT_TOKEN')

intents = discord.Intents.all()
intents.message_content = True

bot = commands.Bot(command_prefix='!', intents=intents)

# Liste des traits (d√©plac√©e au niveau global)
traits = ["Ambitieux","Appliqu√©","Arrogant","Brave","Calme","Chaste","Col√©rique","Compatissant","Confiant","Content","Cupide","Cynique","Ent√™t√©","Excentrique","Fourbe","G√©n√©reux","Gourmand","Honn√™te","Humble","Impatient","Inconstant","Indulgent","Juste","L√¢che","Lubrique","Parano√Øaque","Paresseux","Partial","Patient","Sadique","Sans c≈ìur","Sociable","Temp√©r√©","Timide","Vindicatif","Z√©l√©"]

# Liste des traits incompatibles (d√©plac√©e au niveau global)
incompatible = {
    "Ambitieux": {"Content"},
    "Appliqu√©": {"Paresseux"},
    "Arrogant": {"Humble"},
    "Brave": {"L√¢che"},
    "Calme": {"Col√©rique"},
    "Chaste": {"Lubrique"},
    "Col√©rique": {"Calme"},
    "Compatissant": {"Sadique","Sans c≈ìur"},
    "Confiant": {"Parano√Øaque"},
    "Content": {"Ambitieux"},
    "Cupide": {"G√©n√©reux"},
    "Cynique": {"Z√©l√©"},
    "Ent√™t√©": {"Inconstant","Excentrique"},
    "Excentrique": {"Ent√™t√©","Inconstant"},
    "Fourbe": {"Honn√™te"},
    "G√©n√©reux": {"Cupide"},
    "Gourmand": {"Temp√©r√©"},
    "Honn√™te": {"Fourbe"},
    "Inconstant": {"Ent√™t√©","Excentrique"},
    "Indulgent": {"Vindicatif"},
    "Juste": {"Partial"},
    "L√¢che": {"Brave"},
    "Lubrique": {"Chaste"},
    "Parano√Øaque": {"Confiant"},
    "Paresseux": {"Appliqu√©"},
    "Partial": {"Juste"},
    "Patient": {"Impatient"},
    "Sadique": {"Sans c≈ìur","Compatissant"},
    "Sans c≈ìur": {"Sadique","Compatissant"},
    "Sociable": {"Timide"},
    "Temp√©r√©": {"Gourmand"},
    "Timide": {"Sociable"},
    "Vindicatif": {"Indulgent"},
    "Z√©l√©": {"Cynique"}
}

def tirage_compatible(traits, incompatible, nb_tirages=3):
    tirage = []
    disponibles = set(traits)

    while len(tirage) < nb_tirages and disponibles:
        choix = random.choice(list(disponibles))
        tirage.append(choix)
        incompatibles = incompatible.get(choix, set())
        disponibles -= incompatibles
        disponibles.discard(choix)

    return tirage

# Fichier de sauvegarde
SAVE_FILE = "tirages.json"

# Charger les tirages enregistr√©s
if os.path.exists(SAVE_FILE):
    with open(SAVE_FILE, "r") as f:
        tirages_enregistres = json.load(f)
else:
    tirages_enregistres = {}

# V√©rifier s'il y a des conflits entre les traits
def sont_compatibles(traits_tires):
    for trait in traits_tires:
        if trait in incompatible:
            for incompatible_trait in incompatible[trait]:
                if incompatible_trait in traits_tires:
                    return False
    return True

@bot.event
async def on_ready():
    print("üü¢ Votre tirage est pr√™t !")

@bot.command(name='tirage')
async def tirage(ctx):
    user_id = str(ctx.author.id)

    if user_id in tirages_enregistres:
        traits_existants = tirages_enregistres[user_id]
        await ctx.send(
            f"‚õî Tu as d√©j√† tir√© tes traits ! Voici ceux que je t‚Äôai attribu√©s :\n"
            f"üîπ {traits_existants[0]}\n"
            f"üîπ {traits_existants[1]}\n"
            f"üîπ {traits_existants[2]}"
        )
        return

    # Tirage al√©atoire jusqu'√† obtention de 3 traits compatibles
    while True:
        tirage_traits = random.sample(traits, 3)
        if sont_compatibles(tirage_traits):
            break

    # Sauvegarder le tirage
    tirages_enregistres[user_id] = tirage_traits
    with open(SAVE_FILE, "w") as f:
        json.dump(tirages_enregistres, f, indent=4)

    await ctx.send(
        f"üß† **Voici les traits de ton personnage RP :**\n"
        f"üîπ {tirage_traits[0]}\n"
        f"üîπ {tirage_traits[1]}\n"
        f"üîπ {tirage_traits[2]}"
    )

@bot.command(name='reinitialiser')
@commands.has_permissions(manage_messages=True)
async def reinitialiser(ctx, member: discord.Member):
    user_id = str(member.id)

    if user_id in tirages_enregistres:
        del tirages_enregistres[user_id]
        with open(SAVE_FILE, "w") as f:
            json.dump(tirages_enregistres, f, indent=4)
        await ctx.send(f"‚úÖ Les traits de {member.mention} ont √©t√© r√©initialis√©s.")
    else:
        await ctx.send(f"‚õî {member.mention} n'avait pas encore effectu√© de tirage.")

@reinitialiser.error
async def reinitialiser_error(ctx, error):
    if isinstance(error, commands.MissingPermissions):
        await ctx.send("‚õî Tu n'as pas la permission de faire cela.")
    elif isinstance(error, commands.MissingRequiredArgument):
        await ctx.send("‚õî Tu dois mentionner un utilisateur √† r√©initialiser.")

@bot.command(help="Cette commande te permet d'en savoir plus sur moi et sur mes fonctions !")
async def guide(ctx):
    await ctx.send(f"""*üèõÔ∏è Salutations, noble voyageur, je suppose que tu dois √™tre* **{ctx.author}** !

üëë Je serai ton guide dans ton p√©riple, scribe √©ternel et gardien de la m√©moire **__d'Historia Universalis__**. Mon devoir est simple : t'accompagner dans ton aventure au c≈ìur des √¢ges.

üìú Ici, le **r√¥leplay historique** est au centre de tout. Que tu sois un humble paysan ou un empereur en devenir, ton histoire m√©rite d'√™tre √©crite.

üìå __Deux commandes sont essentielles pour commencer :__

üîπ **!presentation** ‚Äî Je te conterai en quelques mots les fondements d'Historia Universalis, son monde, ses r√®gles, et l'esprit de ce lieu.
üîπ **!tirage** ‚Äî Gr√¢ce √† cette commande, je te confierai trois traits de caract√®re tir√©s au sort. Ils fa√ßonneront ton personnage RP et guideront ses choix, ses qualit√©s‚Ä¶ ou ses faiblesses.

üß† **__Prends garde :__** ce tirage est unique pour chaque personnage que tu joueras et d√©terminera **ton identit√© au sein du RP**, donc... R√©fl√©chis bien avant de te lancer !

*‚úçÔ∏è L'Histoire attend que tu y laisses ton empreinte. Et moi‚Ä¶ je suis l√† pour la consigner !*""")

@bot.event
async def on_message(message):
    if message.author.bot:
        return
    elif message.content.startswith('Bonjour') or message.content.startswith('Salut'):
        await message.channel.send("Bonjour ! Je suis le bot d'**Historia Universalis**. Pour en savoir plus sur **mes fonctions**, utilise la commande **!help** !")

    # Permettre aux autres commandes de fonctionner
    await bot.process_commands(message)

keep_alive()
token = os.environ['DISCORD_BOT_TOKEN']
bot.run(token)
